2025-01-12 15:30:26,347 - annb - INFO - running only pgvector
Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

Found ann_benchmarks.algorithms.pgvector

2025-01-12 15:30:26,392 - annb - INFO - Order: [Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 32, 'efConstruction': 192}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 8, 'efConstruction': 256}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 8, 'efConstruction': 64}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 8, 'efConstruction': 96}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 32, 'efConstruction': 96}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 48, 'efConstruction': 192}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 48, 'efConstruction': 256}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 48, 'efConstruction': 96}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 64, 'efConstruction': 256}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 32, 'efConstruction': 256}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 8, 'efConstruction': 192}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 16, 'efConstruction': 32}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 16, 'efConstruction': 64}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 64, 'efConstruction': 192}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 16, 'efConstruction': 96}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 16, 'efConstruction': 192}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 8, 'efConstruction': 32}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 16, 'efConstruction': 256}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 32, 'efConstruction': 64}], query_argument_groups=[[10], [20], [40], [80], [120], [200], [400], [800]], disabled=False)]
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 32, 'efConstruction': 192}])
32 M, 192 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 32, ef_construction = 192)
Size is 234 MB
done!
Built index in 197.59400296211243
Index size:  240008.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 8, 'efConstruction': 256}])
8 M, 256 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 8, ef_construction = 256)
Size is 234 MB
done!
Built index in 76.31568384170532
Index size:  240008.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 8, 'efConstruction': 64}])
8 M, 64 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 8, ef_construction = 64)
Size is 234 MB
done!
Built index in 35.10979628562927
Index size:  240008.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 8, 'efConstruction': 96}])
8 M, 96 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 8, ef_construction = 96)
Size is 234 MB
done!
Built index in 42.20711803436279
Index size:  240008.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 32, 'efConstruction': 96}])
32 M, 96 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 32, ef_construction = 96)
Size is 234 MB
done!
Built index in 166.0177071094513
Index size:  240008.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 48, 'efConstruction': 192}])
48 M, 192 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 48, ef_construction = 192)
Size is 234 MB
done!
Built index in 353.8220646381378
Index size:  240136.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 48, 'efConstruction': 256}])
48 M, 256 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 48, ef_construction = 256)
Size is 234 MB
done!
Built index in 377.2762930393219
Index size:  240144.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 48, 'efConstruction': 96}])
48 M, 96 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 48, ef_construction = 96)
Size is 234 MB
done!
Built index in 316.4315068721771
Index size:  240152.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 64, 'efConstruction': 256}])
64 M, 256 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 64, ef_construction = 256)
Size is 238 MB
done!
Built index in 603.5313482284546
Index size:  244288.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 32, 'efConstruction': 256}])
32 M, 256 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 32, ef_construction = 256)
Size is 234 MB
done!
Built index in 219.0943615436554
Index size:  240008.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 8, 'efConstruction': 192}])
8 M, 192 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 8, ef_construction = 192)
Size is 234 MB
done!
Built index in 62.04473042488098
Index size:  240008.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 16, 'efConstruction': 32}])
16 M, 32 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 16, ef_construction = 32)
Size is 234 MB
done!
Built index in 50.965670108795166
Index size:  240008.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 16, 'efConstruction': 64}])
16 M, 64 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 16, ef_construction = 64)
Size is 234 MB
done!
Built index in 61.30025053024292
Index size:  240008.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 64, 'efConstruction': 192}])
64 M, 192 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 64, ef_construction = 192)
Size is 238 MB
done!
Built index in 582.3287379741669
Index size:  244296.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 16, 'efConstruction': 96}])
16 M, 96 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 16, ef_construction = 96)
Size is 234 MB
done!
Built index in 71.22182965278625
Index size:  240008.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 16, 'efConstruction': 192}])
16 M, 192 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 16, ef_construction = 192)
Size is 234 MB
done!
Built index in 98.56990790367126
Index size:  240008.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 8, 'efConstruction': 32}])
8 M, 32 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 8, ef_construction = 32)
Size is 234 MB
done!
Built index in 27.244213581085205
Index size:  240008.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 16, 'efConstruction': 256}])
16 M, 256 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 16, ef_construction = 256)
Size is 234 MB
done!
Built index in 115.88447141647339
Index size:  240008.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 32, 'efConstruction': 64}])
32 M, 64 efConstruction, euclidean metric
Postgres concurrency for --batch is 8
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 32, ef_construction = 64)
Size is 234 MB
done!
Built index in 151.45859146118164
Index size:  240008.0
Running query argument group 1 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 2 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 3 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 4 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 5 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 6 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 7 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
Running query argument group 8 of 8...
Run 1/5...
Run 2/5...
Run 3/5...
Run 4/5...
Run 5/5...
2025-01-12 17:24:05,383 - annb - INFO - Terminating 1 workers
