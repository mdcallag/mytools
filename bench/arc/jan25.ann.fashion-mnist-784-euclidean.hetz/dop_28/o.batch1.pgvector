2025-01-23 16:30:23,798 - annb - INFO - running only pgvector
2025-01-23 16:30:23,859 - annb - INFO - Order: [Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 8, 'efConstruction': 32}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 16, 'efConstruction': 32}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 8, 'efConstruction': 64}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 16, 'efConstruction': 64}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 32, 'efConstruction': 64}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 8, 'efConstruction': 96}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 16, 'efConstruction': 96}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 32, 'efConstruction': 96}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 48, 'efConstruction': 96}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 8, 'efConstruction': 192}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 16, 'efConstruction': 192}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 32, 'efConstruction': 192}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 48, 'efConstruction': 192}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 64, 'efConstruction': 192}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 8, 'efConstruction': 256}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 16, 'efConstruction': 256}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 32, 'efConstruction': 256}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 48, 'efConstruction': 256}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 64, 'efConstruction': 256}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False)]
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 8, 'efConstruction': 32}])
8 M, 32 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 8, ef_construction = 32)
DDL: table 234 MB in 10.6 seconds, index 234 MB in 17.4 seconds
done!
Built index in 28.053699731826782
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 16, 'efConstruction': 32}])
16 M, 32 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 16, ef_construction = 32)
DDL: table 234 MB in 10.6 seconds, index 234 MB in 23.9 seconds
done!
Built index in 34.74688363075256
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 8, 'efConstruction': 64}])
8 M, 64 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 8, ef_construction = 64)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 21.9 seconds
done!
Built index in 32.797000885009766
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 16, 'efConstruction': 64}])
16 M, 64 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 16, ef_construction = 64)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 29.5 seconds
done!
Built index in 40.384318590164185
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 32, 'efConstruction': 64}])
32 M, 64 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 32, ef_construction = 64)
DDL: table 234 MB in 11.0 seconds, index 234 MB in 51.1 seconds
done!
Built index in 62.37780809402466
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 8, 'efConstruction': 96}])
8 M, 96 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 8, ef_construction = 96)
DDL: table 234 MB in 10.6 seconds, index 234 MB in 25.4 seconds
done!
Built index in 36.19401693344116
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 16, 'efConstruction': 96}])
16 M, 96 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 16, ef_construction = 96)
DDL: table 234 MB in 10.6 seconds, index 234 MB in 33.8 seconds
done!
Built index in 44.6108512878418
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 32, 'efConstruction': 96}])
32 M, 96 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 32, ef_construction = 96)
DDL: table 234 MB in 11.2 seconds, index 234 MB in 58.4 seconds
done!
Built index in 69.81176519393921
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 48, 'efConstruction': 96}])
48 M, 96 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 48, ef_construction = 96)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 103.6 seconds
done!
Built index in 114.5590169429779
Index size:  240208.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 8, 'efConstruction': 192}])
8 M, 192 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 8, ef_construction = 192)
DDL: table 234 MB in 10.6 seconds, index 234 MB in 36.5 seconds
done!
Built index in 47.316893339157104
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 16, 'efConstruction': 192}])
16 M, 192 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 16, ef_construction = 192)
DDL: table 234 MB in 11.1 seconds, index 234 MB in 46.6 seconds
done!
Built index in 57.949381828308105
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 32, 'efConstruction': 192}])
32 M, 192 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 32, ef_construction = 192)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 73.6 seconds
done!
Built index in 84.47736644744873
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 48, 'efConstruction': 192}])
48 M, 192 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 48, ef_construction = 192)
DDL: table 234 MB in 10.6 seconds, index 234 MB in 112.8 seconds
done!
Built index in 123.65114331245422
Index size:  240152.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 64, 'efConstruction': 192}])
64 M, 192 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 64, ef_construction = 192)
DDL: table 234 MB in 10.6 seconds, index 239 MB in 195.2 seconds
done!
Built index in 206.025239944458
Index size:  245592.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 8, 'efConstruction': 256}])
8 M, 256 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 8, ef_construction = 256)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 43.7 seconds
done!
Built index in 54.65728807449341
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 16, 'efConstruction': 256}])
16 M, 256 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 16, ef_construction = 256)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 55.6 seconds
done!
Built index in 66.4747588634491
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 32, 'efConstruction': 256}])
32 M, 256 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 32, ef_construction = 256)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 84.3 seconds
done!
Built index in 95.25814294815063
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 48, 'efConstruction': 256}])
48 M, 256 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 48, ef_construction = 256)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 123.7 seconds
done!
Built index in 134.56132054328918
Index size:  240152.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 64, 'efConstruction': 256}])
64 M, 256 efConstruction, euclidean metric
Postgres concurrency for --batch is 28
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 64, ef_construction = 256)
DDL: table 234 MB in 10.9 seconds, index 239 MB in 177.3 seconds
done!
Built index in 188.44448137283325
Index size:  245496.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
2025-01-23 17:12:34,612 - annb - INFO - Terminating 1 workers
