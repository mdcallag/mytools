2025-01-23 09:08:01,324 - annb - INFO - running only pgvector
2025-01-23 09:08:01,384 - annb - INFO - Order: [Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 8, 'efConstruction': 32}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 16, 'efConstruction': 32}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 8, 'efConstruction': 64}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 16, 'efConstruction': 64}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 32, 'efConstruction': 64}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 8, 'efConstruction': 96}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 16, 'efConstruction': 96}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 32, 'efConstruction': 96}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 48, 'efConstruction': 96}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 8, 'efConstruction': 192}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 16, 'efConstruction': 192}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 32, 'efConstruction': 192}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 48, 'efConstruction': 192}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 64, 'efConstruction': 192}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 8, 'efConstruction': 256}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 16, 'efConstruction': 256}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 32, 'efConstruction': 256}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 48, 'efConstruction': 256}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False), Definition(algorithm='pgvector', constructor='PGVector', module='ann_benchmarks.algorithms.pgvector', docker_tag='ann-benchmarks-pgvector', arguments=['euclidean', {'M': 64, 'efConstruction': 256}], query_argument_groups=[[10], [20], [30], [40], [80], [120], [200], [300], [400]], disabled=False)]
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 8, 'efConstruction': 32}])
8 M, 32 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 8, ef_construction = 32)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 17.3 seconds
done!
Built index in 28.079514980316162
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 16, 'efConstruction': 32}])
16 M, 32 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 16, ef_construction = 32)
DDL: table 234 MB in 10.6 seconds, index 234 MB in 23.4 seconds
done!
Built index in 34.226613998413086
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 8, 'efConstruction': 64}])
8 M, 64 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 8, ef_construction = 64)
DDL: table 234 MB in 10.6 seconds, index 234 MB in 21.4 seconds
done!
Built index in 32.28808045387268
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 16, 'efConstruction': 64}])
16 M, 64 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 16, ef_construction = 64)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 29.4 seconds
done!
Built index in 40.399460554122925
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 32, 'efConstruction': 64}])
32 M, 64 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 32, ef_construction = 64)
DDL: table 234 MB in 10.8 seconds, index 234 MB in 51.1 seconds
done!
Built index in 62.174790382385254
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 8, 'efConstruction': 96}])
8 M, 96 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 8, ef_construction = 96)
DDL: table 234 MB in 10.9 seconds, index 234 MB in 25.5 seconds
done!
Built index in 36.57908654212952
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 16, 'efConstruction': 96}])
16 M, 96 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 16, ef_construction = 96)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 34.2 seconds
done!
Built index in 45.15192008018494
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 32, 'efConstruction': 96}])
32 M, 96 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 32, ef_construction = 96)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 58.1 seconds
done!
Built index in 69.02809453010559
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 48, 'efConstruction': 96}])
48 M, 96 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 48, ef_construction = 96)
DDL: table 234 MB in 10.8 seconds, index 234 MB in 103.2 seconds
done!
Built index in 114.20447826385498
Index size:  240216.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 8, 'efConstruction': 192}])
8 M, 192 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 8, ef_construction = 192)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 36.5 seconds
done!
Built index in 47.33234238624573
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 16, 'efConstruction': 192}])
16 M, 192 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 16, ef_construction = 192)
DDL: table 234 MB in 11.2 seconds, index 234 MB in 46.6 seconds
done!
Built index in 57.97469997406006
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 32, 'efConstruction': 192}])
32 M, 192 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 32, ef_construction = 192)
DDL: table 234 MB in 10.8 seconds, index 234 MB in 73.8 seconds
done!
Built index in 84.812007188797
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 48, 'efConstruction': 192}])
48 M, 192 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 48, ef_construction = 192)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 113.1 seconds
done!
Built index in 124.04041314125061
Index size:  240192.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 64, 'efConstruction': 192}])
64 M, 192 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 64, ef_construction = 192)
DDL: table 234 MB in 10.9 seconds, index 239 MB in 195.2 seconds
done!
Built index in 206.32109379768372
Index size:  245488.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 8, 'efConstruction': 256}])
8 M, 256 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 8, ef_construction = 256)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 43.7 seconds
done!
Built index in 54.696674823760986
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 16, 'efConstruction': 256}])
16 M, 256 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 16, ef_construction = 256)
DDL: table 234 MB in 10.7 seconds, index 234 MB in 55.6 seconds
done!
Built index in 66.5577642917633
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 32, 'efConstruction': 256}])
32 M, 256 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 32, ef_construction = 256)
DDL: table 234 MB in 10.9 seconds, index 234 MB in 85.0 seconds
done!
Built index in 96.16181802749634
Index size:  240008.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 48, 'efConstruction': 256}])
48 M, 256 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 48, ef_construction = 256)
DDL: table 234 MB in 10.8 seconds, index 234 MB in 123.4 seconds
done!
Built index in 134.35290217399597
Index size:  240232.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Trying to instantiate ann_benchmarks.algorithms.pgvector.PGVector(['euclidean', {'M': 64, 'efConstruction': 256}])
64 M, 256 efConstruction, euclidean metric
Postgres concurrency for --batch is 12
Postgres database name is ib
Got a train set of size (60000 * 784)
Got 10000 queries
Query is: SELECT id FROM items ORDER BY embedding <-> %s LIMIT %s
copying data...
creating index as CREATE INDEX ON items USING hnsw (embedding vector_l2_ops)
                      WITH (m = 64, ef_construction = 256)
DDL: table 234 MB in 10.8 seconds, index 239 MB in 176.6 seconds
done!
Built index in 187.53433465957642
Index size:  245616.0
Running query argument group 1 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 2 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 3 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 4 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 5 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 6 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 7 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 8 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
Running query argument group 9 of 9...
Run 1/3...
Run 2/3...
Run 3/3...
2025-01-23 09:56:04,701 - annb - INFO - Terminating 1 workers
